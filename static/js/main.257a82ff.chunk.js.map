{"version":3,"sources":["Actions/rootActions.js","Components/MusicianCard/MusicianCard.js","Components/Home/index.js","Components/MusicianPage/index.js","App.js","serviceWorker.js","Reducers/rootReducer.js","index.js"],"names":["musiciansFetch","type","payload","musicianLike","id","MusicianCard","_ref","item","navigateTo","handleMusicianLike","react_default","a","createElement","className","onClick","src","imageURL","alt","name","likes","Home","console","log","_this","props","history","push","concat","orderByLikes","musicians","sort","b","this","length","_this2","musiciansList","map","musician","idx","key","Components_MusicianCard_MusicianCard","Component","connect","state","dispatch","bindActionCreators","MusicianPage","navigateBackHome","match","params","musicianId","find","description","Link","to","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","initialState","rootReducer","array","arguments","undefined","action","musicianJson","Object","objectSpread","updatedMusicians","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.257a82ff.chunk.js","sourcesContent":["\r\nexport const MUSICIANS_FETCH = 'MUSICIAN_FETCH'\r\nexport const MUSICIAN_LIKE = 'MUSICIAN_LIKE'\r\n\r\nexport const actionTypes = {\r\n  MUSICIANS_FETCH,\r\n  MUSICIAN_LIKE\r\n}\r\n\r\nexport const musiciansFetch = () => (\r\n  {\r\n    type: MUSICIANS_FETCH,\r\n    payload: null\r\n  }\r\n)\r\n\r\nexport const musicianLike = (id) => (\r\n    {\r\n      type: MUSICIAN_LIKE,\r\n      payload: id\r\n    }\r\n)\r\n\r\nexport const actions = {\r\n  musiciansFetch,\r\n  musicianLike\r\n}","import React from 'react'\r\nimport './MusicianCard.css'\r\n\r\nconst MusicianCard = ({item, navigateTo, handleMusicianLike}) => {\r\n    \r\n    const handleImageClick = () => {\r\n        navigateTo(item.id)\r\n    }\r\n\r\n    const handleLikeClick = () => {\r\n        handleMusicianLike(item.id)\r\n    }\r\n\r\n    return (\r\n        <div className=\"musician-card\">\r\n            <div className=\"musician-card-image-conatiner\">\r\n                <img className=\"image musician-card-image\" onClick={handleImageClick} src={item.imageURL} alt={item.name} />\r\n            </div>\r\n            <div className=\"musician-card-content\">\r\n                <div className=\"musician-card-data\">\r\n                    <div className=\"musician-card-data-name\">{item.name}</div>\r\n                    <div className=\"musician-card-data-likes\">{item.likes > 0 ? item.likes : '0'}</div>\r\n                </div>\r\n                <div className=\"musician-card-actions\">\r\n                    <button className=\"button\" onClick={handleLikeClick} >Like</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MusicianCard","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport {Link} from 'react-router-dom'\r\nimport './index.css'\r\n\r\nimport { musiciansFetch, musicianLike } from '../../Actions/rootActions'\r\nimport MusicianCard from '../MusicianCard/MusicianCard';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      musicians: state.musicians\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ musiciansFetch, musicianLike }, dispatch)\r\n}\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    componentWillMount() {\r\n        if(this.props.musicians.length > 0) return\r\n        this.props.musiciansFetch()\r\n    }\r\n\r\n    navigateTo = (id) =>  {\r\n        console.log(id)\r\n        this.props.history.push(`/${id}`)\r\n    }\r\n\r\n    handleMusicianLike = (id) => {\r\n        this.props.musicianLike(id)\r\n    }\r\n\r\n    orderByLikes= (musicians) => {\r\n        let res = musicians.sort((a,b) => { \r\n            return b.likes - a.likes\r\n        })\r\n        return res\r\n    }\r\n\r\n    render(){\r\n        const { musicians } = this.props\r\n        const musiciansList = this.orderByLikes(musicians).map((musician, idx) => (\r\n            <div className=\"musician-card-container\" key={ idx }>\r\n              <MusicianCard item={ musician } navigateTo={this.navigateTo} handleMusicianLike={this.handleMusicianLike} />\r\n            </div>\r\n        ))\r\n        \r\n        return(\r\n            <div className=\"home-page\">\r\n                <div className=\"musician-list\">\r\n                    {musiciansList}\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nHome = connect(mapStateToProps, mapDispatchToProps)(Home)\r\n\r\nexport default Home","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport {Link} from 'react-router-dom'\r\nimport './index.css'\r\n\r\nimport { musiciansFetch, musicianLike } from '../../Actions/rootActions'\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      musicians: state.musicians\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ musiciansFetch, musicianLike }, dispatch)\r\n}\r\n\r\nclass MusicianPage extends Component {\r\n\r\n    componentWillMount() {\r\n        if(this.props.musicians.length <= 0) {\r\n            this.props.musiciansFetch()\r\n        }\r\n    }\r\n\r\n    navigateBackHome = () => {\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    handleMusicianLike = () => {\r\n        console.log(this.props.match.params.id)\r\n        this.props.musicianLike(+this.props.match.params.id)\r\n    }\r\n\r\n    render() {\r\n        let musicianId = this.props.match.params.id\r\n        let musician = this.props.musicians.find((item) => {\r\n            return item.id === +musicianId\r\n        })\r\n        if(!musician) {\r\n            return (\r\n                <div>\r\n                    Someting went wrong <Link to='/'>Back Home</Link>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"musician-page\">\r\n                <div className=\"musician-page-image-conatiner\">\r\n                    <img className=\"image\" src={musician.imageURL} alt={musician.name} />\r\n                </div>\r\n                <div className=\"musician-page-content\">\r\n                    <div className=\"musician-page-content-header\">\r\n                        <div className=\"musician-page-content-header-title\">{musician.name}</div>\r\n                        <div className=\"likes-counter\">\r\n                            Likes: {musician.likes > 0 ? musician.likes : '0'}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"musician-page-content-description\">\r\n                        {musician.description}\r\n                    </div>\r\n                    <div className=\"musician-page-content-actions\">\r\n                        <button onClick={this.navigateBackHome} className=\"button musician-page-button\">Back to list</button>\r\n                        <button onClick={this.handleMusicianLike} className=\"button musician-page-button\">Like</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nMusicianPage = connect(mapStateToProps, mapDispatchToProps)(MusicianPage)\r\n\r\nexport default MusicianPage","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport Home from './Components/Home'\nimport MusicianPage  from './Components/MusicianPage'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route exact path='/MusicList' component={Home}></Route>\n          <Route path='/MusicList/:id' component={MusicianPage}></Route>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {MUSICIAN_LIKE, MUSICIANS_FETCH} from '../Actions/rootActions'\r\nimport musicianJson from '../Musicians.json'\r\n\r\nconst initialState = {\r\n    musicians: []\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case MUSICIANS_FETCH:\r\n            const musicians = musicianJson.musicians\r\n            return {...state, musicians}\r\n        case MUSICIAN_LIKE: \r\n            const updatedMusicians = musicianLikeIncrement(state.musicians, action.payload)\r\n            return {\r\n                ...state,\r\n                musicians: updatedMusicians\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction musicianLikeIncrement(array, musicianId) {\r\n    return array.map(item => {\r\n        if(item.id !== musicianId) return item\r\n        return {\r\n            ...item,\r\n            likes: item.likes + 1\r\n        }\r\n    })\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './Reducers/rootReducer'\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}